<?php
namespace mobilemsg\service;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class MsgDownStatusFlag {
  const INQUEUE = 2;
  const DOWN_ACCEPTED = 256;
  const DOWN_READED = 512;
  const DOWN_REPLIED = 1024;
  const DOWN_FAIL_NOTEXIST = 65536;
  const DOWN_FAIL_OTHERFAIL = 131072;
  const DOWN_FAIL_UNREACHABLE = 262144;
  const DOWN_FAIL_INVALIDSUBS = 524288;
  const DOWN_FAIL_IDC_REFUSE = 1048576;
  const DOWN_FAIL_SP_REFUSE = 2097152;
  const DOWN_FAIL_BLACKLIST = 4194304;
  static public $__names = array(
    2 => 'INQUEUE',
    256 => 'DOWN_ACCEPTED',
    512 => 'DOWN_READED',
    1024 => 'DOWN_REPLIED',
    65536 => 'DOWN_FAIL_NOTEXIST',
    131072 => 'DOWN_FAIL_OTHERFAIL',
    262144 => 'DOWN_FAIL_UNREACHABLE',
    524288 => 'DOWN_FAIL_INVALIDSUBS',
    1048576 => 'DOWN_FAIL_IDC_REFUSE',
    2097152 => 'DOWN_FAIL_SP_REFUSE',
    4194304 => 'DOWN_FAIL_BLACKLIST',
  );
}

class InvalidOperation extends TException {
  static $_TSPEC;

  public $what = null;
  public $why = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'what',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'why',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['what'])) {
        $this->what = $vals['what'];
      }
      if (isset($vals['why'])) {
        $this->why = $vals['why'];
      }
    }
  }

  public function getName() {
    return 'InvalidOperation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->what);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->why);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InvalidOperation');
    if ($this->what !== null) {
      $xfer += $output->writeFieldBegin('what', TType::I32, 1);
      $xfer += $output->writeI32($this->what);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->why !== null) {
      $xfer += $output->writeFieldBegin('why', TType::STRING, 2);
      $xfer += $output->writeString($this->why);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Identity {
  static $_TSPEC;

  public $version = null;
  public $appId = null;
  public $appKey = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'version',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'appId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'appKey',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['appId'])) {
        $this->appId = $vals['appId'];
      }
      if (isset($vals['appKey'])) {
        $this->appKey = $vals['appKey'];
      }
    }
  }

  public function getName() {
    return 'Identity';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Identity');
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::STRING, 1);
      $xfer += $output->writeString($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appId !== null) {
      $xfer += $output->writeFieldBegin('appId', TType::I32, 2);
      $xfer += $output->writeI32($this->appId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appKey !== null) {
      $xfer += $output->writeFieldBegin('appKey', TType::STRING, 3);
      $xfer += $output->writeString($this->appKey);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SentControl {
  static $_TSPEC;

  public $sentMode = null;
  public $priority = null;
  public $msgValidityPeriod = null;
  public $delivWinOpenTime = null;
  public $delivWinSize = null;
  public $serviceProviderUsed = null;
  public $needRepliet = null;
  public $otherOptMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sentMode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'priority',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'msgValidityPeriod',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'delivWinOpenTime',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'delivWinSize',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'serviceProviderUsed',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        8 => array(
          'var' => 'needRepliet',
          'type' => TType::BOOL,
          ),
        16 => array(
          'var' => 'otherOptMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sentMode'])) {
        $this->sentMode = $vals['sentMode'];
      }
      if (isset($vals['priority'])) {
        $this->priority = $vals['priority'];
      }
      if (isset($vals['msgValidityPeriod'])) {
        $this->msgValidityPeriod = $vals['msgValidityPeriod'];
      }
      if (isset($vals['delivWinOpenTime'])) {
        $this->delivWinOpenTime = $vals['delivWinOpenTime'];
      }
      if (isset($vals['delivWinSize'])) {
        $this->delivWinSize = $vals['delivWinSize'];
      }
      if (isset($vals['serviceProviderUsed'])) {
        $this->serviceProviderUsed = $vals['serviceProviderUsed'];
      }
      if (isset($vals['needRepliet'])) {
        $this->needRepliet = $vals['needRepliet'];
      }
      if (isset($vals['otherOptMap'])) {
        $this->otherOptMap = $vals['otherOptMap'];
      }
    }
  }

  public function getName() {
    return 'SentControl';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sentMode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->priority);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->msgValidityPeriod);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->delivWinOpenTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->delivWinSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->serviceProviderUsed = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              $this->serviceProviderUsed []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->needRepliet);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::MAP) {
            $this->otherOptMap = array();
            $_size6 = 0;
            $_ktype7 = 0;
            $_vtype8 = 0;
            $xfer += $input->readMapBegin($_ktype7, $_vtype8, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $key11 = '';
              $val12 = '';
              $xfer += $input->readString($key11);
              $xfer += $input->readString($val12);
              $this->otherOptMap[$key11] = $val12;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SentControl');
    if ($this->sentMode !== null) {
      $xfer += $output->writeFieldBegin('sentMode', TType::STRING, 1);
      $xfer += $output->writeString($this->sentMode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priority !== null) {
      $xfer += $output->writeFieldBegin('priority', TType::I32, 2);
      $xfer += $output->writeI32($this->priority);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msgValidityPeriod !== null) {
      $xfer += $output->writeFieldBegin('msgValidityPeriod', TType::I32, 3);
      $xfer += $output->writeI32($this->msgValidityPeriod);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->delivWinOpenTime !== null) {
      $xfer += $output->writeFieldBegin('delivWinOpenTime', TType::STRING, 5);
      $xfer += $output->writeString($this->delivWinOpenTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->delivWinSize !== null) {
      $xfer += $output->writeFieldBegin('delivWinSize', TType::STRING, 6);
      $xfer += $output->writeString($this->delivWinSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serviceProviderUsed !== null) {
      if (!is_array($this->serviceProviderUsed)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('serviceProviderUsed', TType::LST, 7);
      {
        $output->writeListBegin(TType::STRING, count($this->serviceProviderUsed));
        {
          foreach ($this->serviceProviderUsed as $iter13)
          {
            $xfer += $output->writeString($iter13);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->needRepliet !== null) {
      $xfer += $output->writeFieldBegin('needRepliet', TType::BOOL, 8);
      $xfer += $output->writeBool($this->needRepliet);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->otherOptMap !== null) {
      if (!is_array($this->otherOptMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('otherOptMap', TType::MAP, 16);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->otherOptMap));
        {
          foreach ($this->otherOptMap as $kiter14 => $viter15)
          {
            $xfer += $output->writeString($kiter14);
            $xfer += $output->writeString($viter15);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DownMsg {
  static $_TSPEC;

  public $mobiles = null;
  public $channel = null;
  public $smsContent = null;
  public $mmsContent = null;
  public $muid = null;
  public $code = null;
  public $desc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobiles',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'channel',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'smsContent',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'mmsContent',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'muid',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mobiles'])) {
        $this->mobiles = $vals['mobiles'];
      }
      if (isset($vals['channel'])) {
        $this->channel = $vals['channel'];
      }
      if (isset($vals['smsContent'])) {
        $this->smsContent = $vals['smsContent'];
      }
      if (isset($vals['mmsContent'])) {
        $this->mmsContent = $vals['mmsContent'];
      }
      if (isset($vals['muid'])) {
        $this->muid = $vals['muid'];
      }
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
    }
  }

  public function getName() {
    return 'DownMsg';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->mobiles = array();
            $_size16 = 0;
            $_etype19 = 0;
            $xfer += $input->readListBegin($_etype19, $_size16);
            for ($_i20 = 0; $_i20 < $_size16; ++$_i20)
            {
              $elem21 = null;
              $xfer += $input->readString($elem21);
              $this->mobiles []= $elem21;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->channel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->smsContent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mmsContent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->muid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DownMsg');
    if ($this->mobiles !== null) {
      if (!is_array($this->mobiles)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mobiles', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->mobiles));
        {
          foreach ($this->mobiles as $iter22)
          {
            $xfer += $output->writeString($iter22);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channel !== null) {
      $xfer += $output->writeFieldBegin('channel', TType::STRING, 2);
      $xfer += $output->writeString($this->channel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->smsContent !== null) {
      $xfer += $output->writeFieldBegin('smsContent', TType::STRING, 3);
      $xfer += $output->writeString($this->smsContent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mmsContent !== null) {
      $xfer += $output->writeFieldBegin('mmsContent', TType::STRING, 4);
      $xfer += $output->writeString($this->mmsContent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->muid !== null) {
      $xfer += $output->writeFieldBegin('muid', TType::STRING, 5);
      $xfer += $output->writeString($this->muid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 6);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 7);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpMsg {
  static $_TSPEC;

  public $msgGno = null;
  public $mobile = null;
  public $readcount = null;
  public $channel = null;
  public $content = null;
  public $acceptTs = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msgGno',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'readcount',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'channel',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'acceptTs',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msgGno'])) {
        $this->msgGno = $vals['msgGno'];
      }
      if (isset($vals['mobile'])) {
        $this->mobile = $vals['mobile'];
      }
      if (isset($vals['readcount'])) {
        $this->readcount = $vals['readcount'];
      }
      if (isset($vals['channel'])) {
        $this->channel = $vals['channel'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['acceptTs'])) {
        $this->acceptTs = $vals['acceptTs'];
      }
    }
  }

  public function getName() {
    return 'UpMsg';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msgGno);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->readcount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->channel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->acceptTs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpMsg');
    if ($this->msgGno !== null) {
      $xfer += $output->writeFieldBegin('msgGno', TType::STRING, 1);
      $xfer += $output->writeString($this->msgGno);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mobile !== null) {
      $xfer += $output->writeFieldBegin('mobile', TType::STRING, 2);
      $xfer += $output->writeString($this->mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->readcount !== null) {
      $xfer += $output->writeFieldBegin('readcount', TType::I32, 3);
      $xfer += $output->writeI32($this->readcount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channel !== null) {
      $xfer += $output->writeFieldBegin('channel', TType::STRING, 4);
      $xfer += $output->writeString($this->channel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 5);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->acceptTs !== null) {
      $xfer += $output->writeFieldBegin('acceptTs', TType::STRING, 6);
      $xfer += $output->writeString($this->acceptTs);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MsgStatus {
  static $_TSPEC;

  public $msgGno = null;
  public $mobile = null;
  public $status = null;
  public $delivTs = null;
  public $acceptTs = null;
  public $replyTs = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msgGno',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'status',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'delivTs',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'acceptTs',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'replyTs',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msgGno'])) {
        $this->msgGno = $vals['msgGno'];
      }
      if (isset($vals['mobile'])) {
        $this->mobile = $vals['mobile'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['delivTs'])) {
        $this->delivTs = $vals['delivTs'];
      }
      if (isset($vals['acceptTs'])) {
        $this->acceptTs = $vals['acceptTs'];
      }
      if (isset($vals['replyTs'])) {
        $this->replyTs = $vals['replyTs'];
      }
    }
  }

  public function getName() {
    return 'MsgStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msgGno);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->delivTs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->acceptTs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->replyTs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MsgStatus');
    if ($this->msgGno !== null) {
      $xfer += $output->writeFieldBegin('msgGno', TType::STRING, 1);
      $xfer += $output->writeString($this->msgGno);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mobile !== null) {
      $xfer += $output->writeFieldBegin('mobile', TType::STRING, 2);
      $xfer += $output->writeString($this->mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I64, 3);
      $xfer += $output->writeI64($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->delivTs !== null) {
      $xfer += $output->writeFieldBegin('delivTs', TType::STRING, 4);
      $xfer += $output->writeString($this->delivTs);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->acceptTs !== null) {
      $xfer += $output->writeFieldBegin('acceptTs', TType::STRING, 5);
      $xfer += $output->writeString($this->acceptTs);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->replyTs !== null) {
      $xfer += $output->writeFieldBegin('replyTs', TType::STRING, 6);
      $xfer += $output->writeString($this->replyTs);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SentResult {
  static $_TSPEC;

  public $code = null;
  public $message = "";
  public $detail = null;
  public $maxMsgOneSent = null;
  public $maxSizeOfCharBuf4JoinAllMobilesInMsg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'detail',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\mobilemsg\service\DownMsg',
            ),
          ),
        4 => array(
          'var' => 'maxMsgOneSent',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'maxSizeOfCharBuf4JoinAllMobilesInMsg',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['detail'])) {
        $this->detail = $vals['detail'];
      }
      if (isset($vals['maxMsgOneSent'])) {
        $this->maxMsgOneSent = $vals['maxMsgOneSent'];
      }
      if (isset($vals['maxSizeOfCharBuf4JoinAllMobilesInMsg'])) {
        $this->maxSizeOfCharBuf4JoinAllMobilesInMsg = $vals['maxSizeOfCharBuf4JoinAllMobilesInMsg'];
      }
    }
  }

  public function getName() {
    return 'SentResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->detail = array();
            $_size23 = 0;
            $_etype26 = 0;
            $xfer += $input->readListBegin($_etype26, $_size23);
            for ($_i27 = 0; $_i27 < $_size23; ++$_i27)
            {
              $elem28 = null;
              $elem28 = new \mobilemsg\service\DownMsg();
              $xfer += $elem28->read($input);
              $this->detail []= $elem28;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxMsgOneSent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxSizeOfCharBuf4JoinAllMobilesInMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SentResult');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->detail !== null) {
      if (!is_array($this->detail)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('detail', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->detail));
        {
          foreach ($this->detail as $iter29)
          {
            $xfer += $iter29->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxMsgOneSent !== null) {
      $xfer += $output->writeFieldBegin('maxMsgOneSent', TType::I32, 4);
      $xfer += $output->writeI32($this->maxMsgOneSent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxSizeOfCharBuf4JoinAllMobilesInMsg !== null) {
      $xfer += $output->writeFieldBegin('maxSizeOfCharBuf4JoinAllMobilesInMsg', TType::I32, 5);
      $xfer += $output->writeI32($this->maxSizeOfCharBuf4JoinAllMobilesInMsg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Filter {
  static $_TSPEC;

  public $mobiles = null;
  public $channel = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobiles',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'channel',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mobiles'])) {
        $this->mobiles = $vals['mobiles'];
      }
      if (isset($vals['channel'])) {
        $this->channel = $vals['channel'];
      }
    }
  }

  public function getName() {
    return 'Filter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->mobiles = array();
            $_size30 = 0;
            $_etype33 = 0;
            $xfer += $input->readListBegin($_etype33, $_size30);
            for ($_i34 = 0; $_i34 < $_size30; ++$_i34)
            {
              $elem35 = null;
              $xfer += $input->readString($elem35);
              $this->mobiles []= $elem35;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->channel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Filter');
    if ($this->mobiles !== null) {
      if (!is_array($this->mobiles)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mobiles', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->mobiles));
        {
          foreach ($this->mobiles as $iter36)
          {
            $xfer += $output->writeString($iter36);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channel !== null) {
      $xfer += $output->writeFieldBegin('channel', TType::STRING, 2);
      $xfer += $output->writeString($this->channel);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FetchControl {
  static $_TSPEC;

  public $ctxt_str = null;
  public $deletePreFetched = null;
  public $fetchSize = null;
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ctxt_str',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'deletePreFetched',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'fetchSize',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\mobilemsg\service\Filter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ctxt_str'])) {
        $this->ctxt_str = $vals['ctxt_str'];
      }
      if (isset($vals['deletePreFetched'])) {
        $this->deletePreFetched = $vals['deletePreFetched'];
      }
      if (isset($vals['fetchSize'])) {
        $this->fetchSize = $vals['fetchSize'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'FetchControl';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ctxt_str);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->deletePreFetched);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->fetchSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \mobilemsg\service\Filter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FetchControl');
    if ($this->ctxt_str !== null) {
      $xfer += $output->writeFieldBegin('ctxt_str', TType::STRING, 1);
      $xfer += $output->writeString($this->ctxt_str);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deletePreFetched !== null) {
      $xfer += $output->writeFieldBegin('deletePreFetched', TType::BOOL, 2);
      $xfer += $output->writeBool($this->deletePreFetched);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fetchSize !== null) {
      $xfer += $output->writeFieldBegin('fetchSize', TType::I32, 3);
      $xfer += $output->writeI32($this->fetchSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 4);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FetchResult {
  static $_TSPEC;

  public $code = null;
  public $message = "";
  public $fetchControl = null;
  public $msgs = null;
  public $msgstatus = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'fetchControl',
          'type' => TType::STRUCT,
          'class' => '\mobilemsg\service\FetchControl',
          ),
        4 => array(
          'var' => 'msgs',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\mobilemsg\service\UpMsg',
            ),
          ),
        5 => array(
          'var' => 'msgstatus',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\mobilemsg\service\MsgStatus',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['fetchControl'])) {
        $this->fetchControl = $vals['fetchControl'];
      }
      if (isset($vals['msgs'])) {
        $this->msgs = $vals['msgs'];
      }
      if (isset($vals['msgstatus'])) {
        $this->msgstatus = $vals['msgstatus'];
      }
    }
  }

  public function getName() {
    return 'FetchResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->fetchControl = new \mobilemsg\service\FetchControl();
            $xfer += $this->fetchControl->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->msgs = array();
            $_size37 = 0;
            $_etype40 = 0;
            $xfer += $input->readListBegin($_etype40, $_size37);
            for ($_i41 = 0; $_i41 < $_size37; ++$_i41)
            {
              $elem42 = null;
              $elem42 = new \mobilemsg\service\UpMsg();
              $xfer += $elem42->read($input);
              $this->msgs []= $elem42;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->msgstatus = array();
            $_size43 = 0;
            $_etype46 = 0;
            $xfer += $input->readListBegin($_etype46, $_size43);
            for ($_i47 = 0; $_i47 < $_size43; ++$_i47)
            {
              $elem48 = null;
              $elem48 = new \mobilemsg\service\MsgStatus();
              $xfer += $elem48->read($input);
              $this->msgstatus []= $elem48;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FetchResult');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fetchControl !== null) {
      if (!is_object($this->fetchControl)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fetchControl', TType::STRUCT, 3);
      $xfer += $this->fetchControl->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msgs !== null) {
      if (!is_array($this->msgs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('msgs', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->msgs));
        {
          foreach ($this->msgs as $iter49)
          {
            $xfer += $iter49->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msgstatus !== null) {
      if (!is_array($this->msgstatus)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('msgstatus', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->msgstatus));
        {
          foreach ($this->msgstatus as $iter50)
          {
            $xfer += $iter50->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

$GLOBALS['mobilemsg_CONSTANTS']['version'] = "0.1";

$GLOBALS['mobilemsg_CONSTANTS']['MaxMsgOneSent'] = 100;

$GLOBALS['mobilemsg_CONSTANTS']['MaxMobilesOneMsg'] = 100;

$GLOBALS['mobilemsg_CONSTANTS']['MaxSizeOfCharBuf4JoinAllMobilesInMsg'] = 1400;

$GLOBALS['mobilemsg_CONSTANTS']['MaxByteOfMsgContent'] = 4000;

$GLOBALS['mobilemsg_CONSTANTS']['MsgDownStatusSucMask'] = 65280;

$GLOBALS['mobilemsg_CONSTANTS']['MsgDownStatusFailMask'] = 268369920;

$GLOBALS['mobilemsg_CONSTANTS']['DownMsg_Ok'] = 0;

$GLOBALS['mobilemsg_CONSTANTS']['DownMsg_PushBack'] = 1;

$GLOBALS['mobilemsg_CONSTANTS']['DownMsg_TooMuchMobiles'] = 2;

$GLOBALS['mobilemsg_CONSTANTS']['DownMsg_TooLargeContent'] = 3;

$GLOBALS['mobilemsg_CONSTANTS']['DownMsg_Rejected'] = 4;

$GLOBALS['mobilemsg_CONSTANTS']['DownMsg_Duplicate'] = 5;

$GLOBALS['mobilemsg_CONSTANTS']['DownMsg_Failed'] = 6;

$GLOBALS['mobilemsg_CONSTANTS']['SentResult_AllDone'] = 0;

$GLOBALS['mobilemsg_CONSTANTS']['SentResult_SomeFailure'] = 1;

$GLOBALS['mobilemsg_CONSTANTS']['SentResult_Traffic'] = 2;

$GLOBALS['mobilemsg_CONSTANTS']['SentResult_Fault'] = -1;


